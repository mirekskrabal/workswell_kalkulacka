* zadani ulohy kalkulacka
 cilem je procvicit zaklady QT frameworku na jednoduche aplikaci - QML frontend, c++ backend,
 propojeni cpp a QML, responzivni frontend pomoci Javascriptu
 Vytvoreni aplikace(QT Quick Application) Kalkulacka

 Moznosti kalkulacky:
  • Klasicka kalkulacka, jako ma windows/mac OS. Napriklad:
  • Bude mozne klikat na cisla jako na tlacitka a nebo psat za pomoci numlock klavesnice
  • Science mode, kde po zapnuti pribude cely radek s vedeckymi funkcemi -sinus, cosinus, tangenc,
    cotangenc, logaritmus a exponenciala etc.
  • Po zmacknuti tlacitka “=” bude mozne pokracovat v praci s vysledkem
  • Moznost retezit operace za sebou
  • Ukladani mezivysledku do pameti
  • Dalsi moznosti muzete pridat dle zvazeni
	
  Pozadavky na aplikaci:
  • vypocty budou provadeny v backend c++ tride, pouziti context property (kalkulacku zle udelat ciste v qml a js)
  • funkcni a uzivatelsky prijemny frontend - pozor na zmeny velikosti oken, pozicovani, layouty

  qt quick: https://doc.qt.io/qt-5/qtquick-index.html
  qml: https://doc.qt.io/qt-5/qtqml-index.html
  integrace qt a qml(custom graficke komponenty): https://doc.qt.io/qt-5/qtqml-cppintegration-topic.html
  context property: https://doc.qt.io/qt-5/qtqml-cppintegration-contextproperties.html
* qt quick module
  lib for writing qml apps
  provides basic types for creating user interfaces (ui, animating, views..)
** visual canvas
   two dimensional canvas with z-ordering
   top-left pixel is the [0,0] pixel
   visual parent:
   - owenership-parent - determines obj lifetime semantics
   - visual-parent - determines where on the canvas an item is drawn)

** positioning
   anchoring:
   - items are anchored to each other at certain boundaries
   - items can placed adjacent or inside of another (by attaching one or
   more of the items anchor-points to an anchor=point of he other)
   - more efficient than binding-based layouts

*** z-order
    ordering of overlapping 2d objects
    determines which window appears on top of the other (order on the z
    axis)
*** states
    how and where the individual component parts of the visual item are
    displayed within it, and all the data associated with that state

*** transitions
    "edge" between two states
    may trigger other events

* qt qml
  framework for develoiping apps and libs with qml language
  qml - user interface specification and programming language
  support for impertaive js expressions combined with dynamic property binding
  qt quick - std lib of types and functionality for qmljjjj
 
*** item type
    all visual items provided by qt quick are based on the item type, which
    provides a common set of attribute for visual items, including opacity
    and transform attributes

*** transforms
    qt quick types have built-in support for transformations
    //if you wish to have zour visual content roated or scaled, you can set the Item::rotation or Item::scale property

** model/view programming
   classes that manage the relationship between data and the way it is presented to the user

** anchoring
   each item can be thought of as having a set of 7 invisible "anchor lines" 
   - left, horizontalCenter, right, top, verticalCenter, baseline, bottom


*** concept
    table of buttons anchored to bottom of the window
    - provides number, operators etc. which user interacts with

** context property
   QQmlContext class - exposes data to the context of a qml object so that the data can be reerred to directly
   from within the scope of the qml code

** signal and handler event system
   signal - event X signal handler - response
   when a signal is emitted, corespoding signal handler is invoked
